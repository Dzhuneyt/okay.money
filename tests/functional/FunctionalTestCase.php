<?php

namespace tests\functional;

use common\models\Account;
use common\models\Transaction;
use common\models\User;
use Faker\Generator;
use linslin\yii2\curl\Curl;
use PHPUnit\Framework\TestCase;
use yii\base\Exception;
use yii\db\Query;
use yii\helpers\Json;
use yii\web\BadRequestHttpException;
use yii\web\ForbiddenHttpException;
use yii\web\NotFoundHttpException;
use yii\web\ServerErrorHttpException;
use yii\web\UnauthorizedHttpException;

class FunctionalTestCase extends TestCase
{

    // The result of `php yii server`
    private $baseUrl = 'http://localhost:9009/';

    /**
     * @var User
     */
    protected $baseUser;

    private $accessToken;

    /**
     * @var Generator
     */
    protected $faker;

    protected function setUp()
    {
        parent::setUp();
        $this->faker = \Faker\Factory::create();
        // Prerequisites for almost all tests
        $this->baseUser = $this->createUser();
    }

    protected function tearDown()
    {
        if (!$this->deleteUser($this->baseUser->id)) {
            throw new ServerErrorHttpException('Can not delete temp user for tests: ' . $this->baseUser->id);
        }
        parent::tearDown();
    }

    /**
     * @param $path
     * @param string $method
     * @param array $params
     *
     * @return array
     * @throws Exception
     * @throws ForbiddenHttpException
     * @throws NotFoundHttpException
     * @throws ServerErrorHttpException
     */
    protected function apiCall($path, $method = 'GET', $params = [])
    {
        $curl = new Curl();
        $curl->setHeader('Accept', 'application/json');

        if ($this->accessToken) {
            $curl->setGetParams(['access-token' => $this->accessToken]);
        }

        $url = $this->baseUrl . $path;
        switch ($method) {
            case 'GET':
                $curl->setGetParams($params);
                $response = $curl->get($url);
                break;
            case 'POST':
                $curl->setPostParams($params);
                $response = $curl->post($url);
                break;
            case 'PUT':
                $curl->setPostParams($params);
                $response = $curl->put($url);
                break;
            case 'DELETE':
                $curl->setPostParams($params);
                $response = $curl->delete($url);
                break;
            default:
                throw new Exception('HTTP method not implemented for API call');
        }

        if ($response !== false) {
            try {
                $response = Json::decode($response, true);
            } catch (Exception $e) {
                \Yii::error("Can not parse JSON response from API");
                throw $e;
            }
        }

        // List of status codes here http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
        switch ($curl->responseCode) {

            case 'timeout':
                throw new Exception('API call resulted in timeout: ' . $path);
            case 200: // success
            case 201: // successfully created
            case 204: // successfully deleted
                return $response;
            case 400:
                throw new BadRequestHttpException('Invalid request to API: ' . $method . ':' . $url);
            case 401:
                throw new UnauthorizedHttpException('Attempting to call an authenticated API with no token: ' . $method . " " . $url);
            case 403:
                throw new ForbiddenHttpException('Unauthorized API call: ' . $url);
            case 404:
                //404 Error logic here
                throw new NotFoundHttpException("URL not found:" . $path);
            case 422:
                var_dump($response);
                throw new ServerErrorHttpException('Model validation failed - error 422: ' . print_r($response, true));
            case 500:
                var_dump($response);
                throw new ServerErrorHttpException('API call during test threw 500 Internal Server Error: ' . print_r($response,
                        true));
            default:
                \Yii::error('Test error');
                \Yii::error($url);
                \Yii::error($method);
                \Yii::error($curl->responseCode);
                \Yii::error($response);
                throw new ServerErrorHttpException('API call during test resulted in an unknown error code:' . print_r($curl->responseCode,
                        1));
                break;
        }
    }

    /**
     * Create a new fake user with autogenerated username/password/email
     * @return User the newly created user
     * @throws ServerErrorHttpException
     */
    protected function createUser()
    {
        $faker = \Faker\Factory::create('en_US');
        $user = new User();
        $user->username = $faker->userName;
        $user->auth_key = md5(md5($faker->password));
        $user->password_hash = md5($faker->password);
        $user->email = $faker->email;
        $user->status = 10;
        if ($user->save()) {
            return $user;
        } else {
            \Yii::error($user->getErrors());
            throw new ServerErrorHttpException('Can not create a test user');
        }
    }

    protected function deleteUser($id)
    {
        $user = User::findOne($id);
        $deleted = $user->delete();

        return $deleted;
    }

    protected function logout()
    {
        $this->accessToken = null;
    }

    protected function loginAsUser($idUser = null)
    {
        if ($idUser != null) {
            $token = \Yii::$app->db->createCommand(
                'SELECT auth_key FROM user WHERE id=:id',
                [':id' => $idUser]
            )->queryScalar();
            if (!$token) {
                throw new Exception('Can not login as user with ID ' . $idUser . '. Not found in DB');
            }
            $this->accessToken = $token;

            return;
        }
        $accessToken = $this->apiCall('v1/user/login', 'POST', [
            'username' => 'demo',
            'password' => 'demo',
        ]);
        $this->accessToken = $accessToken;
    }

    /**
     * @return Account
     * @throws Exception
     * @throws ForbiddenHttpException
     * @throws NotFoundHttpException
     * @throws ServerErrorHttpException
     */
    protected function createAccount($ownerId = null)
    {
        $account = new Account();
        $account->name = $this->faker->text(50);

        if ($ownerId === null) {
            $account->owner_id = (int)(new Query())
                ->select('id')
                ->from(User::tableName())
                ->orderBy('id DESC')
                ->one();
        } else {
            $account->owner_id = $ownerId;
        }

        if (!$account->save()) {
            print_r($account->getErrors());
            throw new Exception('Can not create an account in DB for tests');
        }

        return $account;
    }

    protected function createTransaction($idAccount, $sum = null)
    {
        $transaction = new Transaction();
        $transaction->account_id = $idAccount;
        $transaction->description = $this->faker->text(50);
        $transaction->sum = $sum === null ? $this->faker->numberBetween(1, 99) : $sum;
        if (!$transaction->save()) {
            print_r($transaction->getErrors());
            throw new Exception('Can not create a transaction in DB for tests');
        }

        return $transaction;
    }

    protected function deleteAccount($id)
    {
        Account::deleteAll(['id' => $id]);
    }

    protected function deleteTransaction($id)
    {
        Transaction::deleteAll(['id' => $id]);
    }
}